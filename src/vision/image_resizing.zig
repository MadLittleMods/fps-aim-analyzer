const std = @import("std");
const render_utils = @import("../utils/render_utils.zig");
const BoundingClientRect = render_utils.BoundingClientRect;
const findIntersection = render_utils.findIntersection;
const image_conversion = @import("image_conversion.zig");
const RGBImage = image_conversion.RGBImage;
const RGBPixel = image_conversion.RGBPixel;
const HSVPixel = image_conversion.HSVPixel;
const GrayscalePixel = image_conversion.GrayscalePixel;
const BinaryPixel = image_conversion.BinaryPixel;
const getPixelClamped = image_conversion.getPixelClamped;
const getPixelValueFieldNames = image_conversion.getPixelValueFieldNames;
const rgbPixelsfromHexArray = image_conversion.rgbPixelsfromHexArray;
const expectImageApproxEqual = image_conversion.expectImageApproxEqual;
const test_images = @import("test_images.zig");
const mooshroom_image = test_images.mooshroom_image;
const test_square_image = test_images.test_square_image;
const test_color_checkerboard_image = test_images.test_color_checkerboard_image;
const test_strip_image = test_images.test_strip_image;
const print_utils = @import("../utils/print_utils.zig");
const printLabeledImage = print_utils.printLabeledImage;

/// Sampling methods to use when resizing an image
const InterpolationMethod = enum {
    nearest,
    box,
    bilinear,
    bicubic,
};

/// Nearest neighbor sampling: Sample the nearest pixel to the given uv coordinate.
pub fn sampleNearest(source_image: anytype, u: f32, v: f32) std.meta.Child(@TypeOf(source_image.pixels)) {
    const x: isize = @intFromFloat(u * @as(f32, @floatFromInt(source_image.width)));
    const y: isize = @intFromFloat(v * @as(f32, @floatFromInt(source_image.height)));

    return getPixelClamped(source_image, x, y);
    // return source_image.pixels[y * source_image.width + x];
}

// Average all pixels in the UV region [u - u_min,  u + u_min] and [v - v_min,  v + v_min]
pub fn sampleBox(source_image: anytype, u: f32, v: f32, u_min: f32, v_min: f32) std.meta.Child(@TypeOf(source_image.pixels)) {
    const x_min = ((u - u_min) * @as(f32, @floatFromInt(source_image.width)));
    const x_max = ((u + u_min) * @as(f32, @floatFromInt(source_image.width)));
    const y_min = ((v - v_min) * @as(f32, @floatFromInt(source_image.height)));
    const y_max = ((v + v_min) * @as(f32, @floatFromInt(source_image.height)));

    // Find the integer bounds that enclose the region
    const x_min_int: isize = @intFromFloat(x_min);
    const x_max_int: isize = @intFromFloat(@ceil(x_max));
    const y_min_int: isize = @intFromFloat(y_min);
    const y_max_int: isize = @intFromFloat(@ceil(y_max));

    const source_box = BoundingClientRect(f32){
        .x = x_min,
        .y = y_min,
        .width = x_max - x_min,
        .height = y_max - y_min,
    };

    const PixelType = std.meta.Child(@TypeOf(source_image.pixels));
    var resultant_pixel: PixelType = undefined;
    // Loop through the  "R", "G", "B" values of the pixel
    inline for (comptime getPixelValueFieldNames(PixelType)) |pixel_value_field_name| {
        // Sum up all of the source pixels in the UV region
        var sum: f32 = 0.0;
        var total_area: f32 = 0.0;
        for (@intCast(y_min_int)..@intCast(y_max_int)) |y_int| {
            for (@intCast(x_min_int)..@intCast(x_max_int)) |x_int| {
                const x = @as(f32, @floatFromInt(x_int));
                const y = @as(f32, @floatFromInt(y_int));

                const pixel_box = BoundingClientRect(f32){
                    .x = x,
                    .y = y,
                    .width = 1.0,
                    .height = 1.0,
                };
                // Use the overlap of the UV source region and the current pixel we're
                // considering to find out how much this source pixel contributes to the
                // color of the resultant pixel
                const maybe_overlap_box = findIntersection(source_box, pixel_box);

                const pixel = getPixelClamped(source_image, @intCast(x_int), @intCast(y_int));
                const area = if (maybe_overlap_box) |overlap_box|
                    overlap_box.width * overlap_box.height
                else
                    0.0;

                sum += @field(pixel, pixel_value_field_name) * area;
                total_area += area;
            }
        }

        // Get the average of all the pixels in the UV region
        const result = sum / total_area;
        @field(resultant_pixel, pixel_value_field_name) = result;
    }

    return resultant_pixel;
}

/// Linear interpolate between two values.
fn lerp(a: f32, b: f32, t: f32) f32 {
    return a + (b - a) * t;
}

// Bilinear interpolate between four values.
fn bilerp(p00: f32, p10: f32, p01: f32, p11: f32, x_fractional: f32, y_fractional: f32) f32 {
    // p00 ----ðŸ”µ---- p10
    //         |
    //         |
    //         |
    // p01 ----ðŸŸ ---- p11
    //
    // Interpolate between the first set of values in the x-direction to find the blue dot
    const x1 = lerp(p00, p10, x_fractional);
    // Interpolate between the second set of values in the x-direction to find the orange dot
    const x2 = lerp(p01, p11, x_fractional);

    // Interpolate between the two new intermediate values in the y-direction to find the green dot
    //
    // p00 ----x1---- p10
    //         |
    //         ðŸŸ¢
    //         |
    // p01 ----x2---- p11
    const result = lerp(x1, x2, y_fractional);
    return result;
}

// Reference:
//  - https://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/
//  - https://en.wikipedia.org/wiki/Bilinear_interpolation
//  - https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/
pub fn sampleBilinear(source_image: anytype, u: f32, v: f32) std.meta.Child(@TypeOf(source_image.pixels)) {
    // Calculate pixel center coordinates in the source image. Offset by half a pixel so
    // that we are measuring to/from the center of a pixel which can then can be rounded
    // back down to the pixel coordinate. This allows sampling to occur evenly around a
    // pixel position and integer truncation works correctly around the edges/corners.
    const x = (u * @as(f32, @floatFromInt(source_image.width))) - 0.5;
    const x_fractional = x - @floor(x);
    const y = (v * @as(f32, @floatFromInt(source_image.height))) - 0.5;
    const y_fractional = y - @floor(y);

    const p00 = getPixelClamped(source_image, @intFromFloat(x + 0), @intFromFloat(y + 0));
    const p10 = getPixelClamped(source_image, @intFromFloat(x + 1), @intFromFloat(y + 0));
    const p01 = getPixelClamped(source_image, @intFromFloat(x + 0), @intFromFloat(y + 1));
    const p11 = getPixelClamped(source_image, @intFromFloat(x + 1), @intFromFloat(y + 1));

    // Interpolate bi-linearly!
    const PixelType = std.meta.Child(@TypeOf(source_image.pixels));
    switch (PixelType) {
        RGBPixel => {
            return .{
                .r = bilerp(p00.r, p10.r, p01.r, p11.r, x_fractional, y_fractional),
                .g = bilerp(p00.g, p10.g, p01.g, p11.g, x_fractional, y_fractional),
                .b = bilerp(p00.b, p10.b, p01.b, p11.b, x_fractional, y_fractional),
            };
        },
        HSVPixel => {
            return .{
                .h = bilerp(p00.h, p10.h, p01.h, p11.h, x_fractional, y_fractional),
                .s = bilerp(p00.s, p10.s, p01.s, p11.s, x_fractional, y_fractional),
                .v = bilerp(p00.v, p10.v, p01.v, p11.v, x_fractional, y_fractional),
            };
        },
        GrayscalePixel => {
            return .{
                .value = bilerp(p00.value, p10.value, p01.value, p11.value, x_fractional, y_fractional),
            };
        },
        BinaryPixel => {
            @compileError("sampleBilinear(...): BinaryPixel is not supported since we can't interpolate between true/false");
        },
        else => {
            @compileLog("PixelType=", @typeName(PixelType));
            @compileError("sampleBilinear(...): Unsupported pixel type");
        },
    }
}

fn cubicHermiteInterpolation(A: f32, B: f32, C: f32, D: f32, t: f32) f32 {
    const a = -A / 2.0 + (3.0 * B) / 2.0 - (3.0 * C) / 2.0 + D / 2.0;
    const b = A - (5.0 * B) / 2.0 + 2.0 * C - D / 2.0;
    const c = -A / 2.0 + C / 2.0;
    const d = B;

    return a * t * t * t + b * t * t + c * t + d;
}

/// Hermite Bicubic interpolation
///
// Reference:
//  - https://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/
//  - Bicubic Interpolation - Computerphile, https://www.youtube.com/watch?v=poY_nGzEEWM
//  - https://en.wikipedia.org/wiki/Bicubic_interpolation
pub fn sampleBicubic(source_image: anytype, u: f32, v: f32) std.meta.Child(@TypeOf(source_image.pixels)) {
    // Calculate coordinates. We also need to offset by half a pixel to keep image from
    // shifting down and left half a pixel.
    const x = (u * @as(f32, @floatFromInt(source_image.width))) - 0.5;
    const x_int: isize = @intFromFloat(x);
    _ = x_int;
    const x_fractional = x - @floor(x);

    const y = (v * @as(f32, @floatFromInt(source_image.height))) - 0.5;
    const y_int: isize = @intFromFloat(y);
    _ = y_int;
    const y_fractional = y - @floor(y);

    // Get the surrounding 16 pixels
    //
    // 1st row
    const p00 = getPixelClamped(source_image, @intFromFloat(x - 1), @intFromFloat(y - 1));
    const p10 = getPixelClamped(source_image, @intFromFloat(x + 0), @intFromFloat(y - 1));
    const p20 = getPixelClamped(source_image, @intFromFloat(x + 1), @intFromFloat(y - 1));
    const p30 = getPixelClamped(source_image, @intFromFloat(x + 2), @intFromFloat(y - 1));
    // 2nd row
    const p01 = getPixelClamped(source_image, @intFromFloat(x - 1), @intFromFloat(y + 0));
    const p11 = getPixelClamped(source_image, @intFromFloat(x + 0), @intFromFloat(y + 0));
    const p21 = getPixelClamped(source_image, @intFromFloat(x + 1), @intFromFloat(y + 0));
    const p31 = getPixelClamped(source_image, @intFromFloat(x + 2), @intFromFloat(y + 0));
    // 3rd row
    const p02 = getPixelClamped(source_image, @intFromFloat(x - 1), @intFromFloat(y + 1));
    const p12 = getPixelClamped(source_image, @intFromFloat(x + 0), @intFromFloat(y + 1));
    const p22 = getPixelClamped(source_image, @intFromFloat(x + 1), @intFromFloat(y + 1));
    const p32 = getPixelClamped(source_image, @intFromFloat(x + 2), @intFromFloat(y + 1));
    // 4th row
    const p03 = getPixelClamped(source_image, @intFromFloat(x - 1), @intFromFloat(y + 2));
    const p13 = getPixelClamped(source_image, @intFromFloat(x + 0), @intFromFloat(y + 2));
    const p23 = getPixelClamped(source_image, @intFromFloat(x + 1), @intFromFloat(y + 2));
    const p33 = getPixelClamped(source_image, @intFromFloat(x + 2), @intFromFloat(y + 2));

    const PixelType = std.meta.Child(@TypeOf(source_image.pixels));
    var resultant_pixel: PixelType = undefined;
    inline for (comptime getPixelValueFieldNames(PixelType)) |pixel_value_field_name| {
        // Rename it to something shorter so all of these lookups fit better
        const f = pixel_value_field_name;

        const x1 = cubicHermiteInterpolation(
            @field(p00, f),
            @field(p10, f),
            @field(p20, f),
            @field(p30, f),
            x_fractional,
        );
        const x2 = cubicHermiteInterpolation(
            @field(p01, f),
            @field(p11, f),
            @field(p21, f),
            @field(p31, f),
            x_fractional,
        );
        const x3 = cubicHermiteInterpolation(
            @field(p02, f),
            @field(p12, f),
            @field(p22, f),
            @field(p32, f),
            x_fractional,
        );
        const x4 = cubicHermiteInterpolation(
            @field(p03, f),
            @field(p13, f),
            @field(p23, f),
            @field(p33, f),
            x_fractional,
        );
        const result = cubicHermiteInterpolation(x1, x2, x3, x4, y_fractional);

        // We need to clamp because the cubic hermite curves under/overshoot the min/max values
        @field(resultant_pixel, f) = std.math.clamp(result, 0.0, 1.0);
    }

    return resultant_pixel;
}

/// Pretty much an "auto" interpolation method.
pub fn getIdealInterpolationMethod(
    image: anytype,
    new_width: usize,
    new_height: usize,
) InterpolationMethod {
    // // If the image can be perfectly resized using nearest neighbor, then use that.
    // if (image.width % new_width == 0 and image.height % new_height == 0) {
    //     return .nearest;
    // }

    // > When making an image larger, use bilinear, which has a natural smoothing
    // > effect. You want to blend over the interpolated fake detail in the new, larger
    // > image that never existed in the original image.
    // >
    // > -- https://blog.codinghorror.com/better-image-resizing/
    if (new_width > image.width or new_height > image.height) {
        return .bilinear;
    }

    // > When making an image smaller, use bicubic, which has a natural sharpening
    // > effect. You want to emphasize the data that remains in the new, smaller image
    // > after discarding all that extra detail from the original image
    // >
    // > -- https://blog.codinghorror.com/better-image-resizing/
    // return .bicubic;
    //
    // But instead, we will use box sampling since it takes all pixels into account and
    // produce a more accurate result
    return .box;
}

// Reference: https://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/
pub fn resizeImage(
    image: anytype,
    new_width: usize,
    new_height: usize,
    /// Sample type to use when resizing
    interpolation_method: InterpolationMethod,
    allocator: std.mem.Allocator,
) !@TypeOf(image) {
    const PixelType = std.meta.Child(@TypeOf(image.pixels));
    var output_pixels = try allocator.alloc(PixelType, new_width * new_height);

    const u_min = (0 + 0.5) / @as(f32, @floatFromInt(new_width));
    const v_min = (0 + 0.5) / @as(f32, @floatFromInt(new_height));

    for (0..new_height) |y| {
        const row_start_pixel_index = y * new_width;

        // Calculate UV offset to the center of the pixel (this way when we sample the
        // image, we get a proper average)
        //
        // > This translates [pixel coordinates] to UVs, or "normalized" coordinates
        // > e.g. [0.5/4, 1.5/4, 2.5/4, 3.5/4], which spans a range of [0.5/width, 1 â€“
        // > 0.5/width] (pixel centers).
        // >
        // > This representation seems counterintuitive at first, but what it provides
        // > us is a guarantee and convention that the image corners are placed at [0
        // > and 1] normalized, or [0, width] unnormalized.
        // >
        // > -- https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/
        const v = (@as(f32, @floatFromInt(y)) + 0.5) / @as(f32, @floatFromInt(new_height));
        for (0..new_width) |x| {
            const current_pixel_index = row_start_pixel_index + x;
            const u = (@as(f32, @floatFromInt(x)) + 0.5) / @as(f32, @floatFromInt(new_width));

            output_pixels[current_pixel_index] = switch (interpolation_method) {
                .nearest => sampleNearest(image, u, v),
                .box => sampleBox(image, u, v, u_min, v_min),
                .bilinear => sampleBilinear(image, u, v),
                .bicubic => sampleBicubic(image, u, v),
            };
        }
    }

    return .{
        .width = new_width,
        .height = new_height,
        .pixels = output_pixels,
    };
}

// When comparing float pixels, they should be less than an 8-bit increment value apart
// which means there will be no difference when we convert back to 8-bit (255) based
// values since everything is floored.
const PIXEL_TOLERANCE = 1.0 / 255.0;

const ResizeTestCase = struct {
    label: []const u8,
    source_image: RGBImage,
    new_width: usize,
    new_height: usize,
    expected_pixels: []const RGBPixel,
};

fn _test_resize_method(test_case: ResizeTestCase, interpolation_method: InterpolationMethod, allocator: std.mem.Allocator) !void {
    const resized_image = try resizeImage(
        test_case.source_image,
        test_case.new_width,
        test_case.new_height,
        interpolation_method,
        allocator,
    );
    defer resized_image.deinit(allocator);

    try expectImageApproxEqual(
        resized_image,
        RGBImage{
            .width = test_case.new_width,
            .height = test_case.new_height,
            .pixels = test_case.expected_pixels,
        },
        PIXEL_TOLERANCE,
        allocator,
    );
}

fn test_resize_method(test_case: ResizeTestCase, interpolation_method: InterpolationMethod, allocator: std.mem.Allocator) !void {
    _test_resize_method(test_case, interpolation_method, allocator) catch |err| {
        std.debug.print("\nTest case: {s} ({}x{} to {}x{}) (using {}):", .{
            test_case.label,
            test_case.source_image.width,
            test_case.source_image.height,
            test_case.new_width,
            test_case.new_height,
            interpolation_method,
        });

        try printLabeledImage("Source image", test_case.source_image, .full_block, allocator);

        return err;
    };
}

test "resizeImage .nearest" {
    const allocator = std.testing.allocator;

    const test_cases = [_]ResizeTestCase{
        .{
            .label = "Upscale mooshroom_image uniformly",
            .source_image = mooshroom_image,
            .new_width = 24,
            .new_height = 24,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x940c0f, 0x940c0f, 0x940c0f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0x940c0f, 0x940c0f, 0x940c0f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0x940c0f, 0x940c0f, 0x940c0f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3,
                0x171414, 0x171414, 0x171414, 0xd39696, 0xd39696, 0xd39696, 0x171414, 0x171414, 0x171414, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0x171414, 0x171414, 0x171414, 0xd39696, 0xd39696, 0xd39696, 0x171414, 0x171414, 0x171414, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0x171414, 0x171414, 0x171414, 0xd39696, 0xd39696, 0xd39696, 0x171414, 0x171414, 0x171414, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xce9191, 0xce9191, 0xce9191, 0xd39696, 0xd39696, 0xd39696, 0xce9191, 0xce9191, 0xce9191, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xce9191, 0xce9191, 0xce9191, 0xd39696, 0xd39696, 0xd39696, 0xce9191, 0xce9191, 0xce9191, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xce9191, 0xce9191, 0xce9191, 0xd39696, 0xd39696, 0xd39696, 0xce9191, 0xce9191, 0xce9191, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xd39696, 0xd39696, 0xd39696, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xd39696, 0xd39696, 0xd39696, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xd39696, 0xd39696, 0xd39696, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x333333, 0x333333, 0x333333, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414,
                0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x333333, 0x333333, 0x333333, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414,
                0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x333333, 0x333333, 0x333333, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414,
            }),
        },
        .{
            .label = "Upscale test_color_checkerboard_image uniformly",
            .source_image = test_color_checkerboard_image,
            .new_width = 8,
            .new_height = 8,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x0000ff, 0x0000ff,
                0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x0000ff, 0x0000ff,
                0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x0000ff, 0x0000ff, 0xff0000, 0xff0000,
                0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x0000ff, 0x0000ff, 0xff0000, 0xff0000,
                0x0000ff, 0x0000ff, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xffffff, 0xffffff,
                0x0000ff, 0x0000ff, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xffffff, 0xffffff,
                0x00ff00, 0x00ff00, 0x0000ff, 0x0000ff, 0xffffff, 0xffffff, 0xff0000, 0xff0000,
                0x00ff00, 0x00ff00, 0x0000ff, 0x0000ff, 0xffffff, 0xffffff, 0xff0000, 0xff0000,
            }),
        },
        .{
            .label = "Downscale test_square_image uniformly",
            .source_image = test_square_image,
            .new_width = 4,
            .new_height = 4,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x1be951, 0xffffff, 0xffffff, 0xe91b51,
                0x1be951, 0xffffff, 0xffffff, 0xe91b51,
                0x1be951, 0xffffff, 0xffffff, 0xe91b51,
                0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51,
            }),
        },
        .{
            .label = "Downscale test_square_image (non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 7,
            .new_height = 7,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0xe91b51, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51,
                0xe91b51, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe91b51,
                0xe91b51, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe91b51,
                0xe91b51, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe91b51,
                0xe91b51, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe91b51,
                0xe91b51, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe91b51,
                0xe91b51, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51,
            }),
        },
        .{
            .label = "Upscale test_square_image (non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 23,
            .new_height = 23,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9,
                0x03a3de, 0xe91b51, 0xe91b51, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51, 0xe91b51, 0x03a3de,
                0x03a3de, 0xe91b51, 0xe91b51, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51, 0xe91b51, 0x03a3de,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x2d1903, 0xe91b51, 0xe91b51, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0xe91b51, 0xe91b51, 0x2d1903,
                0x03a3de, 0xe91b51, 0xe91b51, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51, 0xe91b51, 0x03a3de,
                0x03a3de, 0xe91b51, 0xe91b51, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xe91b51, 0xe91b51, 0x03a3de,
                0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9,
            }),
        },
        .{
            .label = "Downscale test_square_image (non-uniform and non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 9,
            .new_height = 6,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x03a3de, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0x03a3de,
                0x2d1903, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0x2d1903,
                0x2d1903, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0x2d1903,
                0x2d1903, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0x2d1903,
                0x2d1903, 0x1be951, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x1be951, 0x2d1903,
                0x03a3de, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0xde03a8, 0x03a3de,
            }),
        },
    };

    for (test_cases) |test_case| {
        try test_resize_method(test_case, .nearest, allocator);
    }
}

test "resizeImage .box" {
    const allocator = std.testing.allocator;

    const test_cases = [_]ResizeTestCase{
        // .{
        //     .label = "Should not change if we're using the same size as the orignal test_square_image",
        //     .source_image = test_square_image,
        //     .new_width = test_square_image.width,
        //     .new_height = test_square_image.height,
        //     .expected_pixels = &rgbPixelsfromHexArray(
        //         &([_]u24{0x010ab9} ** 16 ++
        //             [_]u24{ 0x03a3de, 0xe91b51 } ++ [_]u24{0xde03a8} ** 12 ++ [_]u24{ 0xe91b51, 0x03a3de } ++
        //             ([_]u24{ 0x2d1903, 0xe91b51, 0x1be951 } ++ [_]u24{0xffffff} ** 10 ++ [_]u24{ 0x1be951, 0xe91b51, 0x2d1903 }) ** 12 ++
        //             [_]u24{ 0x03a3de, 0xe91b51 } ++ [_]u24{0xde03a8} ** 12 ++ [_]u24{ 0xe91b51, 0x03a3de } ++
        //             [_]u24{0x010ab9} ** 16),
        //     ),
        // },
        .{
            .label = "Should not change if we're using the same size as the orignal test_strip_image",
            .source_image = test_strip_image,
            .new_width = test_strip_image.width,
            .new_height = test_strip_image.height,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0xffff00, 0xffff00, 0x0000ff, 0xff7f00, 0x0000ff, 0x00ff00, 0xff7f00, 0xff7f00, 0xff7f00, 0xff7f00,
                0xffff00, 0xffff00, 0x0000ff, 0xff7f00, 0x0000ff, 0x00ff00, 0xff7f00, 0xff7f00, 0xff7f00, 0xff7f00,
                0x00ffff, 0x00ffff, 0x00ffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
                0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ffff, 0x00ffff, 0x00ffff,
                0xff7f00, 0xff7f00, 0xff7f00, 0xff7f00, 0x0000ff, 0x00ff00, 0xff7f00, 0x0000ff, 0xffff00, 0xffff00,
                0xff7f00, 0xff7f00, 0xff7f00, 0xff7f00, 0x0000ff, 0x00ff00, 0xff7f00, 0x0000ff, 0xffff00, 0xffff00,
            }),
        },
        // .{
        //     .label = "Downscale test_square_image uniformly",
        //     .source_image = test_square_image,
        //     .new_width = 4,
        //     .new_height = 4,
        //     .expected_pixels = &rgbPixelsfromHexArray(&.{
        //         // (matches Serenity/Chrome)
        //         0x70528a, 0xb782d7, 0xb782d7, 0x70528a,
        //         0x8b8668, 0xffffff, 0xffffff, 0x8c8768,
        //         0x8b8668, 0xffffff, 0xffffff, 0x8c8768,
        //         0x70528a, 0xb782d7, 0xb782d7, 0x70528a,
        //     }),
        // },
        // .{
        //     .label = "Upscale mooshroom_image uniformly",
        //     .source_image = mooshroom_image,
        //     .new_width = 24,
        //     .new_height = 24,
        //     .expected_pixels = &rgbPixelsfromHexArray(&.{
        //         0x940c0f, 0x940b0f, 0x940b0f, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
        //         0x940b0f, 0x940c0f, 0x940c0f, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x940c0e, 0x940c0e, 0x940c0e, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
        //         0x940b0f, 0x940c0f, 0x940c0f, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x940c0e, 0x940c0e, 0x940c0e, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
        //         0xfefefe, 0xfefefe, 0xfefefe, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xfefefe, 0xfefefe, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa70e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa70e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa70e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3,
        //         0x171414, 0x171414, 0x171414, 0xd29595, 0xd39696, 0xd39696, 0x171414, 0x171414, 0x171414, 0xa80e12, 0xa80e12, 0xa80e12, 0xa70d12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0x171414, 0x171414, 0x171414, 0xd29595, 0xd39696, 0xd39696, 0x171414, 0x171414, 0x171414, 0xa80e12, 0xa80e12, 0xa80e12, 0xa70d12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0x171414, 0x171414, 0x171414, 0xd29595, 0xd39696, 0xd39696, 0x171414, 0x171414, 0x171414, 0xa80e12, 0xa80e12, 0xa80e12, 0xa70d12, 0xa80e12, 0xa80e12, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xcd9090, 0xcd9090, 0xcd9090, 0xd39696, 0xd39595, 0xd39595, 0xcd9090, 0xcd9090, 0xcd9090, 0xa70d12, 0xa70d12, 0xa70d12, 0xb2b2b2, 0xb2b2b2, 0xb2b2b2, 0xb2b2b2, 0xb2b2b2, 0xb2b2b2, 0xa80d12, 0xa80d12, 0xa80d12, 0xa80d12, 0xa80d12, 0xa80d12,
        //         0xce9191, 0xce9191, 0xce9191, 0xd39696, 0xd39696, 0xd39696, 0xce9191, 0xce9191, 0xce9191, 0xa80e12, 0xa80e12, 0xa80e12, 0xb2b2b2, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xce9191, 0xce9191, 0xce9191, 0xd39696, 0xd39696, 0xd39696, 0xce9191, 0xce9191, 0xce9191, 0xa80e12, 0xa80e12, 0xa80e12, 0xb2b2b2, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xfefefe, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xd39696, 0xd39696, 0xd39696, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xfefefe, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xd39696, 0xd39696, 0xd39696, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xffffff, 0xffffff, 0xffffff, 0xa80e12, 0xa80e12, 0xa80e12, 0xfefefe, 0xffffff, 0xffffff, 0x940c0f, 0x940c0f, 0x940c0f, 0xd39696, 0xd39696, 0xd39696, 0xa80e12, 0xa80e12, 0xa80e12,
        //         0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xfefefe, 0xffffff, 0xffffff, 0x333333, 0x333333, 0x333333, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414,
        //         0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xfefefe, 0xffffff, 0xffffff, 0x333333, 0x333333, 0x333333, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414,
        //         0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414, 0xfefefe, 0xffffff, 0xffffff, 0x333333, 0x333333, 0x333333, 0xffffff, 0xffffff, 0xffffff, 0x171414, 0x171414, 0x171414,
        //     }),
        // },
        // .{
        //     .label = "Downscale test_square_image (non-evenly divisible)",
        //     .source_image = test_square_image,
        //     .new_width = 7,
        //     .new_height = 7,
        //     .expected_pixels = &rgbPixelsfromHexArray(&.{
        //         0x492f99, 0x7824b3, 0x8125ba, 0x8125ba, 0x8125ba, 0x7824b3, 0x492f99,
        //         0x7d332e, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x7c332e,
        //         0x7c332e, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x7c332e,
        //         0x7d332e, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x7c332e,
        //         0x7c332e, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x7c332e,
        //         0x7c332e, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x7c332e,
        //         0x492f99, 0x7824b3, 0x8125ba, 0x8125ba, 0x8125ba, 0x7824b3, 0x492f99,
        //     }),
        // },
        // .{
        //     .label = "Upscale test_square_image (non-evenly divisible)",
        //     .source_image = test_square_image,
        //     .new_width = 23,
        //     .new_height = 23,
        //     .expected_pixels = &rgbPixelsfromHexArray(&.{
        //         0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9,
        //         0x0260cd, 0x4a35a1, 0x821184, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x821184, 0x4a35a1, 0x0260cd,
        //         0x0891c2, 0x864e82, 0xe41b5a, 0xc51f9d, 0xd921ac, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xd921ac, 0xc51f9d, 0xe41b5a, 0x864e82, 0x0891c2,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1902, 0x961a2e, 0xcf3451, 0x1be950, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be950, 0xcf3451, 0x961a2e, 0x2d1803,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be850, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be850, 0xcf3451, 0x961a2e, 0x2d1802,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1902, 0x961a2e, 0xcf3451, 0x1ae950, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1ae950, 0xcf3450, 0x961a2e, 0x2c1902,
        //         0x2d1902, 0x961a2e, 0xcf3451, 0x1be950, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be950, 0xcf3450, 0x961a2e, 0x2d1803,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3451, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3451, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2c1902, 0x961a2e, 0xcf3451, 0x1ae950, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1ae950, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be950, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be950, 0xcf3450, 0x961a2e, 0x2d1803,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be850, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be850, 0xcf3450, 0x961a2e, 0x2d1802,
        //         0x2d1902, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x2d1903, 0x961a2e, 0xcf3451, 0x1be951, 0xb7f8c8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb7f8c8, 0x1be951, 0xcf3450, 0x961a2e, 0x2d1903,
        //         0x0891c2, 0x864e82, 0xe41b5a, 0xc51f9d, 0xd921ac, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xe222b2, 0xd921ac, 0xc51f9d, 0xe41b5a, 0x864e82, 0x0891c2,
        //         0x0260cd, 0x4a35a1, 0x821184, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x7d06af, 0x821184, 0x4a35a1, 0x0260cd,
        //         0x010ab9, 0x0109b9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9,
        //     }),
        // },
        // .{
        //     .label = "Downscale test_square_image (non-uniform and non-evenly divisible)",
        //     .source_image = test_square_image,
        //     .new_width = 9,
        //     .new_height = 6,
        //     .expected_pixels = &rgbPixelsfromHexArray(&.{
        //         0x583995, 0x931f9e, 0x9d24b8, 0x9d24b8, 0x9d24b8, 0x9d24b8, 0x9d24b8, 0x931f9e, 0x4b409b,
        //         0x7f2e2d, 0xa4bd92, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3bd92, 0x712b26,
        //         0x7f2e2d, 0xa4bd92, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3bd92, 0x712b26,
        //         0x7f2e2d, 0xa4bd92, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3bd92, 0x712b26,
        //         0x7f2e2d, 0xa4bd92, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa3bd92, 0x712b26,
        //         0x583995, 0x931f9e, 0x9d24b8, 0x9d24b8, 0x9d24b8, 0x9d24b8, 0x9d24b8, 0x931f9e, 0x4b409b,
        //     }),
        // },
    };

    for (test_cases) |test_case| {
        try test_resize_method(test_case, .box, allocator);
    }
}

test "resizeImage .bilinear" {
    const allocator = std.testing.allocator;

    const test_cases = [_]ResizeTestCase{
        .{
            .label = "Downscale test_square_image uniformly",
            .source_image = test_square_image,
            .new_width = 4,
            .new_height = 4,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0xb24866, 0xee81d3, 0xee81d3, 0xb24866,
                0x818251, 0xffffff, 0xffffff, 0x828151,
                0x818251, 0xffffff, 0xffffff, 0x828151,
                0xb24866, 0xee81d3, 0xee81d3, 0xb24866,
            }),
        },
        .{
            .label = "Upscale mooshroom_image uniformly",
            .source_image = mooshroom_image,
            .new_width = 24,
            .new_height = 24,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x940c0f, 0x940c0f, 0xb75c5e, 0xdbadae, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xdbaeaf, 0xb75c5e, 0x940c0f, 0xb75c5e, 0xdbadae, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0x940c0f, 0x940c0f, 0xb75c5e, 0xdbadae, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xdbaeaf, 0xb75c5e, 0x940c0f, 0xb75c5e, 0xdbadae, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xb75c5e, 0xb75c5e, 0xc57879, 0xd39394, 0xe2aeb0, 0xe2aeb0, 0xe2aeb0, 0xe2aeb0, 0xd39395, 0xc57879, 0xb75c5e, 0xcf9294, 0xe7c8c9, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xdbadae, 0xdbadae, 0xd39395, 0xcc787b, 0xc55e61, 0xc55e61, 0xc55e61, 0xc55e61, 0xcc787a, 0xd39395, 0xdbadae, 0xe7c8c9, 0xf3e3e4, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xc55e60, 0xe2aeb0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xbc5558, 0xd19d9f, 0xe5e5e5, 0xe4d3d3, 0xe3c1c1, 0xe2aeaf, 0xe2aeaf, 0xe2aeaf, 0xe2aeaf, 0xe2aeaf, 0xe2aeaf, 0xe2aeaf, 0xe3c1c1, 0xe4d3d3, 0xe5e5e5, 0xe5e5e5,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xb44d50, 0xc08c8e, 0xcccccc, 0xc9a7a8, 0xc78384, 0xc55e60, 0xc55e60, 0xc55e60, 0xc55e60, 0xc55e60, 0xc55e60, 0xc55e60, 0xc78384, 0xc9a7a8, 0xcccccc, 0xcccccc,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xab4447, 0xaf7c7d, 0xb3b3b3, 0xaf7c7d, 0xab4547, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xab4547, 0xaf7b7d, 0xb3b3b3, 0xb3b3b3,
                0xb1b0b0, 0xb1b0b0, 0xb3898a, 0xb46264, 0xb63b3d, 0xa12c2f, 0x8c1e21, 0x770f12, 0x8a3336, 0x9c5859, 0xaf7c7d, 0xac5759, 0xaa3235, 0xa80e12, 0xa92023, 0xaa3235, 0xab4447, 0xaa3235, 0xa92023, 0xa80e12, 0xaa3235, 0xac5759, 0xaf7c7d, 0xaf7c7d,
                0x646262, 0x646262, 0x846464, 0xa46667, 0xc4686a, 0x9a4b4d, 0x712e30, 0x471213, 0x682224, 0x8a3336, 0xab4447, 0xaa3235, 0xa92023, 0xa80e12, 0xaa3235, 0xac5759, 0xaf7c7d, 0xac5759, 0xaa3235, 0xa80e12, 0xa92023, 0xaa3235, 0xab4447, 0xab4447,
                0x171414, 0x171414, 0x553f3f, 0x946a6a, 0xd39696, 0x946a6a, 0x553f3f, 0x171414, 0x471213, 0x770f12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xab4547, 0xaf7b7d, 0xb3b3b3, 0xaf7b7d, 0xab4547, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0x533d3d, 0x533d3d, 0x7e5b5b, 0xa87878, 0xd39696, 0xa87878, 0x7e5b5b, 0x533d3d, 0x6f2d2f, 0x8c1d20, 0xa80e12, 0xa92023, 0xaa3235, 0xab4447, 0xae696b, 0xb08e8f, 0xb3b3b3, 0xaf7b7d, 0xab4547, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0x906767, 0x906767, 0xa67676, 0xbc8686, 0xd39696, 0xbc8686, 0xa67676, 0x906767, 0x98494a, 0xa02b2e, 0xa80e12, 0xaa3235, 0xac5759, 0xaf7b7d, 0xb08e8f, 0xb1a0a1, 0xb3b3b3, 0xaf7b7d, 0xab4547, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xce9191, 0xce9191, 0xcf9292, 0xd19494, 0xd39696, 0xd19494, 0xcf9292, 0xce9191, 0xc16566, 0xb4393c, 0xa80e12, 0xab4447, 0xaf7b7d, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xb3b3b3, 0xaf7b7d, 0xab4547, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xdeb5b5, 0xdeb5b5, 0xd59c9c, 0xcd8283, 0xc46869, 0xc36768, 0xc26667, 0xc16566, 0xb8484a, 0xb02b2e, 0xa80e12, 0xaa3235, 0xac5759, 0xaf7b7d, 0xaf7b7d, 0xaf7b7d, 0xaf7b7d, 0xac5759, 0xaa3235, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xeedada, 0xeedada, 0xdba5a6, 0xc97072, 0xb63b3e, 0xb53a3d, 0xb53a3c, 0xb4393c, 0xb02b2e, 0xac1c20, 0xa80e12, 0xa92023, 0xaa3235, 0xab4547, 0xab4547, 0xab4547, 0xab4547, 0xaa3235, 0xa92023, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xb1282c, 0xbb4346, 0xc55e61, 0xbb4346, 0xb1282c, 0xa80e12, 0xb1282c, 0xbb4346, 0xc55e61, 0xb94346, 0xad282b, 0xa10d11, 0xa81c20, 0xaf2c2f, 0xb63b3e, 0xb12c2f, 0xac1d20, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xbb4346, 0xce797b, 0xe1aeaf, 0xce797b, 0xbb4346, 0xa80e12, 0xbb4346, 0xce797b, 0xe1aeaf, 0xca787a, 0xb24245, 0x9a0c10, 0xa82b2e, 0xb6494b, 0xc46869, 0xbb4a4c, 0xb12c2f, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xe2aeb0, 0xc55e61, 0xa80e12, 0xc55e61, 0xe2aeb0, 0xffffff, 0xe2aeb0, 0xc55e60, 0xa80e12, 0xc55e60, 0xe1aeaf, 0xffffff, 0xdbadae, 0xb75d5f, 0x940c0f, 0xa93a3c, 0xbd6768, 0xd39696, 0xc46869, 0xb63b3e, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xd1afb0, 0xa45f61, 0x771012, 0xa45f61, 0xd1afb0, 0xffffff, 0xd1afb0, 0xa45f61, 0x771012, 0xa45f61, 0xd1afb0, 0xffffff, 0xd0b2b2, 0xa26567, 0x73191b, 0x984e4f, 0xbc8384, 0xe1b9b9, 0xbe8081, 0x9b484a, 0x771012, 0x771012,
                0xffffff, 0xffffff, 0xc1b0b0, 0x846161, 0x471113, 0x846161, 0xc1b0b0, 0xffffff, 0xc1b0b0, 0x846061, 0x471113, 0x846061, 0xc1afb0, 0xffffff, 0xc5b6b6, 0x8c6e6f, 0x532526, 0x876263, 0xbb9f9f, 0xf0dbdb, 0xb79899, 0x7f5556, 0x471113, 0x471113,
                0xffffff, 0xffffff, 0xb1b0b0, 0x646262, 0x171414, 0x646262, 0xb1b0b0, 0xffffff, 0xb1b0b0, 0x646262, 0x171414, 0x646262, 0xb1b0b0, 0xffffff, 0xbababa, 0x777777, 0x333333, 0x777777, 0xbababa, 0xffffff, 0xb1b0b0, 0x646262, 0x171414, 0x171414,
                0xffffff, 0xffffff, 0xb1b0b0, 0x646262, 0x171414, 0x646262, 0xb1b0b0, 0xffffff, 0xb1b0b0, 0x646262, 0x171414, 0x646262, 0xb1b0b0, 0xffffff, 0xbababa, 0x777777, 0x333333, 0x777777, 0xbababa, 0xffffff, 0xb1b0b0, 0x646262, 0x171414, 0x171414,
            }),
        },
        .{
            .label = "Downscale test_square_image (non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 7,
            .new_height = 7,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x613496, 0x8f05ae, 0x8f05ae, 0x8f05ae, 0x8f05ae, 0x8f05ae, 0x613496,
                0xa51a35, 0xeefdf2, 0xffffff, 0xffffff, 0xffffff, 0xeefdf2, 0xa51a35,
                0xa51a35, 0xeefdf2, 0xffffff, 0xffffff, 0xffffff, 0xeefdf2, 0xa51a35,
                0xa51a35, 0xeefdf2, 0xffffff, 0xffffff, 0xffffff, 0xeefdf2, 0xa51a35,
                0xa51a35, 0xeefdf2, 0xffffff, 0xffffff, 0xffffff, 0xeefdf2, 0xa51a35,
                0xa51a35, 0xeefdf2, 0xffffff, 0xffffff, 0xffffff, 0xeefdf2, 0xa51a35,
                0x613496, 0x8f05ae, 0x8f05ae, 0x8f05ae, 0x8f05ae, 0x8f05ae, 0x613496,
            }),
        },
        .{
            .label = "Upscale test_square_image (non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 23,
            .new_height = 23,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9,
                0x025dcd, 0x4634a3, 0x7d108b, 0x7907ac, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7907ac, 0x7d108b, 0x4634a3, 0x025dcd,
                0x0d82a9, 0x844a79, 0xdb2260, 0xb3378e, 0xd13dad, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xd13dad, 0xb3378e, 0xdb2260, 0x844a79, 0x0d82a9,
                0x2a2211, 0x911e33, 0xba4852, 0x34cd56, 0xaee6bd, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xaee6bd, 0x34cd56, 0xba4852, 0x911e33, 0x2a2211,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2d1903, 0x931a2d, 0xb74c51, 0x28db51, 0xaaf6be, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xaaf6be, 0x28db51, 0xb74c51, 0x931a2d, 0x2d1903,
                0x2a2111, 0x911e33, 0xba4852, 0x34cd56, 0xaee6bd, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xfceef9, 0xaee6bd, 0x34cd56, 0xba4852, 0x911e33, 0x2a2111,
                0x0d82a9, 0x844a79, 0xdb2260, 0xb3378e, 0xd13dad, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xe53fbc, 0xd13dad, 0xb3378e, 0xdb2260, 0x844a79, 0x0d82a9,
                0x025dcd, 0x4634a3, 0x7d108b, 0x7907ac, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7906af, 0x7907ac, 0x7d108b, 0x4634a3, 0x025dcd,
                0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9, 0x010ab9,
            }),
        },
        .{
            .label = "Downscale test_square_image (non-uniform and non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 9,
            .new_height = 6,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x4d5daa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0x4d5daa,
                0x761921, 0x41ec6e, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x41ec6e, 0x761921,
                0x761921, 0x41ec6e, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x41ec6e, 0x761921,
                0x761921, 0x41ec6e, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x41ec6e, 0x761921,
                0x761921, 0x41ec6e, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x41ec6e, 0x761921,
                0x4d5daa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0xb904aa, 0x4d5daa,
            }),
        },
    };

    for (test_cases) |test_case| {
        try test_resize_method(test_case, .bilinear, allocator);
    }
}

test "resizeImage .bicubic" {
    const allocator = std.testing.allocator;

    // FIXME: These look roughly correct so we assume it's good.
    // We don't have another source of truth to compare against.
    const test_cases = [_]ResizeTestCase{
        .{
            .label = "Downscale test_square_image uniformly",
            .source_image = test_square_image,
            .new_width = 4,
            .new_height = 4,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0xc7435b, 0xfc80d2, 0xfc80d2, 0xc7435b,
                0x7f804b, 0xffffff, 0xffffff, 0x7f804b,
                0x7f804b, 0xffffff, 0xffffff, 0x7f804b,
                0xc7435b, 0xfc80d2, 0xfc80d2, 0xc7435b,
            }),
        },
        .{
            .label = "Upscale mooshroom_image uniformly",
            .source_image = mooshroom_image,
            .new_width = 24,
            .new_height = 24,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x830000, 0x8c0000, 0xb04c4e, 0xe1bebe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xddb4b5, 0xa7393b, 0x8c0000, 0xa53235, 0xd8a7a8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0x8c0000, 0x940c0f, 0xb35356, 0xdfb6b7, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xdbaeaf, 0xab4144, 0x940c0f, 0xab4144, 0xdbadae, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xb04c4e, 0xb35356, 0xc27173, 0xd69a9b, 0xe5b7b8, 0xeac2c3, 0xeac2c3, 0xe5b7b8, 0xd49495, 0xbe6668, 0xb65658, 0xc98485, 0xeacfd0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xe1bebe, 0xdfb6b7, 0xd69a9b, 0xca7274, 0xc15558, 0xbe4a4d, 0xbe4a4d, 0xc15558, 0xca7073, 0xd89799, 0xe4bcbd, 0xf1dddd, 0xfdfbfb, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xe5b7b8, 0xc15558, 0xa80e12, 0x9e0000, 0x9e0000, 0xa80e12, 0xc15558, 0xe5b7b8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
                0xffffff, 0xffffff, 0xeec3c4, 0xc04c4f, 0x9f0000, 0x970000, 0x9b0000, 0xa60000, 0xbd4c4f, 0xdcb8b9, 0xf0ffff, 0xf2fefe, 0xebd7d7, 0xe5b7b8, 0xe4b0b1, 0xe4b0b1, 0xe4b1b2, 0xe4b0b2, 0xe4b1b2, 0xe5b7b8, 0xe6c8c9, 0xe7dede, 0xe8eeee, 0xe9f2f2,
                0xffffff, 0xffffff, 0xf1c4c5, 0xc24f52, 0xa10000, 0x9c0000, 0xa40000, 0xaf0409, 0xba4b4d, 0xc6a8a9, 0xcedede, 0xccc6c6, 0xc68788, 0xc15558, 0xc0474a, 0xc04649, 0xc0494c, 0xc0474a, 0xc0474a, 0xc15558, 0xc47c7e, 0xc7b0b0, 0xcad5d5, 0xcadfde,
                0xffffff, 0xffffff, 0xe5b7b8, 0xc15558, 0xa80e12, 0xa10000, 0xa30000, 0xa80e12, 0xab4447, 0xb08e8f, 0xb3b3b3, 0xb08e8f, 0xab4547, 0xa80e12, 0xa70106, 0xa7070c, 0xa80e12, 0xa7070c, 0xa70106, 0xa80e12, 0xab3e41, 0xaf8283, 0xb3b3b3, 0xb3bfbe,
                0xb3bebd, 0xb3b4b4, 0xb69091, 0xb85e60, 0xb43639, 0xa01b1f, 0x840a0d, 0x760b0d, 0x812e30, 0x996364, 0xaa7c7d, 0xab5b5d, 0xa51d21, 0xa10000, 0xa10002, 0xa31b1e, 0xa42d30, 0xa31d21, 0xa20307, 0xa10000, 0xa31e22, 0xa75456, 0xaa7c7d, 0xaa8586,
                0x454e4e, 0x4e5050, 0x775c5d, 0xad6c6d, 0xc66d6e, 0x9f5051, 0x5b2425, 0x34080a, 0x4c1314, 0x802e30, 0xa83c3e, 0xaf272a, 0xa80509, 0xa30000, 0xa61e21, 0xaa595b, 0xac797a, 0xaa5e60, 0xa7282b, 0xa40509, 0xa50c10, 0xa7272a, 0xa83c3e, 0xa84042,
                0x090a0a, 0x171414, 0x553f3f, 0xa97979, 0xd39696, 0xa37979, 0x4a3f3f, 0x171414, 0x340809, 0x760a0d, 0xa80e12, 0xb2070b, 0xac0105, 0xa80e12, 0xab4547, 0xb08e8f, 0xb3b3b3, 0xb08e8f, 0xab4547, 0xa80e12, 0xa70106, 0xa7070c, 0xa80e12, 0xa80e12,
                0x2e1919, 0x3a2323, 0x6e4d4d, 0xb48686, 0xd7a5a4, 0xb39291, 0x6e6665, 0x433e3d, 0x562223, 0x830a0d, 0xa70106, 0xaf0c10, 0xad2528, 0xab4447, 0xae7678, 0xb2afaf, 0xb4c5c4, 0xb19899, 0xab494c, 0xa80e12, 0xa60001, 0xa60002, 0xa70106, 0xa70005,
                0x855555, 0x8b5b5b, 0xa47272, 0xc69292, 0xd7a5a4, 0xc9a0a0, 0xaa8e8d, 0x957575, 0x954c4d, 0x9f1c1f, 0xa7070c, 0xab2529, 0xae5e60, 0xb08e8f, 0xb2afaf, 0xb4c7c7, 0xb4c5c4, 0xb09394, 0xab4649, 0xa80d12, 0xa60002, 0xa70207, 0xa7070c, 0xa7070b,
                0xcd9090, 0xce9191, 0xcf9292, 0xd19494, 0xd39696, 0xd39999, 0xd29c9c, 0xce9191, 0xc16365, 0xb2282b, 0xa80e12, 0xa83538, 0xae7d7e, 0xb3b3b3, 0xb4c5c4, 0xb4c5c4, 0xb3b3b3, 0xaf8283, 0xab3e41, 0xa80e12, 0xa70106, 0xa7070c, 0xa80e12, 0xa80e12,
                0xecc0c0, 0xeababa, 0xdfa4a4, 0xd08485, 0xc66d6e, 0xc66a6b, 0xcc6f70, 0xcd6a6b, 0xc24a4c, 0xb22023, 0xa80e12, 0xa62a2d, 0xaa5e60, 0xad8586, 0xaf9192, 0xb09091, 0xb08283, 0xad5d5f, 0xa92c2f, 0xa6080d, 0xa60105, 0xa7080c, 0xa80e12, 0xa80e12,
                0xfcefef, 0xf7e3e3, 0xe3b0b1, 0xc86a6c, 0xb43639, 0xaf2629, 0xb2272a, 0xb3272a, 0xb01d20, 0xab1216, 0xa80d12, 0xa6161a, 0xa52629, 0xa53336, 0xa73b3e, 0xaa4144, 0xac3f41, 0xaa2e31, 0xa71519, 0xa40308, 0xa50206, 0xa6080c, 0xa80d12, 0xa80e12,
                0xffffff, 0xffffff, 0xe5b7b8, 0xc15558, 0xa80e12, 0xa10000, 0xa40509, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12, 0xa80d12, 0xa80e12, 0xa80e12,
                0xffffff, 0xffffff, 0xe7b7b8, 0xc24b4e, 0xaa0308, 0xaa080c, 0xb63134, 0xbe4b4e, 0xba3c3f, 0xb11e22, 0xad0d11, 0xb21d21, 0xbc3a3e, 0xc0494c, 0xb93539, 0xac1317, 0xa40003, 0xa70a0e, 0xae2326, 0xb33235, 0xb22b2e, 0xaf1a1e, 0xad0d11, 0xac0b0f,
                0xffffff, 0xffffff, 0xe7b2b3, 0xc44649, 0xb1080c, 0xbc2e32, 0xd58385, 0xe3b2b4, 0xd7888a, 0xbf383c, 0xb20d11, 0xc0383b, 0xd98789, 0xe4b1b2, 0xd38688, 0xb43538, 0xa00307, 0xa6171a, 0xb7484a, 0xc36567, 0xc05354, 0xb82b2e, 0xb20d11, 0xb1070b,
                0xffffff, 0xffffff, 0xe2aeb0, 0xbb4346, 0xa80e12, 0xbe4c4f, 0xe8c0c1, 0xffffff, 0xe8c0c1, 0xbe4c4f, 0xa80e12, 0xbf4c4f, 0xe9c0c1, 0xffffff, 0xe3c3c4, 0xb25254, 0x940c0f, 0xa0272a, 0xbf6e6e, 0xd39696, 0xca7778, 0xb73b3e, 0xa80e12, 0xa40308,
                0xffffff, 0xffffff, 0xd3aeaf, 0x994345, 0x7d0f12, 0xa05355, 0xe2cecf, 0xffffff, 0xe2cece, 0xa05254, 0x7d0f12, 0xa05254, 0xe2cdce, 0xffffff, 0xe0d3d4, 0x9d5e5f, 0x751719, 0x8f3d3e, 0xc59191, 0xe3bfbe, 0xcd9798, 0x9f494b, 0x7d0f12, 0x750205,
                0xffffff, 0xffffff, 0xbfafb0, 0x6b4647, 0x411213, 0x745253, 0xd0c8c8, 0xffffff, 0xd0c8c8, 0x735152, 0x411213, 0x735151, 0xcfc6c6, 0xffffff, 0xd5d0d0, 0x7f6465, 0x4f2728, 0x795657, 0xc9b4b4, 0xf3e4e4, 0xcbb4b4, 0x7c5758, 0x411213, 0x340203,
                0xffffff, 0xffffff, 0xb1b0b0, 0x4a4848, 0x171414, 0x535050, 0xc2c2c2, 0xffffff, 0xc2c2c2, 0x535050, 0x171414, 0x524f4f, 0xc0bfbf, 0xffffff, 0xcccccc, 0x686969, 0x333333, 0x686969, 0xcccccc, 0xffffff, 0xc9c8c8, 0x636161, 0x171414, 0x050202,
                0xffffff, 0xffffff, 0xaeb0b0, 0x424848, 0x0c1414, 0x4b5151, 0xc0c2c2, 0xffffff, 0xc0c2c2, 0x4b5151, 0x0c1414, 0x4a504f, 0xbdbfbf, 0xffffff, 0xcacdcc, 0x636a6a, 0x2b3535, 0x646d6d, 0xcdd3d3, 0xffffff, 0xc9cece, 0x5d6363, 0x0c1414, 0x000202,
            }),
        },
        .{
            .label = "Downscale test_square_image (non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 7,
            .new_height = 7,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x693992, 0x9400a7, 0x9300a7, 0x9300a7, 0x9300a7, 0x9400a7, 0x693992,
                0xbb0b37, 0xf4fff7, 0xffffff, 0xffffff, 0xffffff, 0xf4fff7, 0xbb0b37,
                0xbb0b37, 0xf4fef7, 0xffffff, 0xffffff, 0xffffff, 0xf4fef7, 0xbb0b37,
                0xbb0b37, 0xf4fef7, 0xffffff, 0xffffff, 0xffffff, 0xf4fef7, 0xbb0b37,
                0xbb0b37, 0xf4fef7, 0xffffff, 0xffffff, 0xffffff, 0xf4fef7, 0xbb0b37,
                0xbb0b37, 0xf4fff7, 0xffffff, 0xffffff, 0xffffff, 0xf4fff7, 0xbb0b37,
                0x693992, 0x9400a7, 0x9300a7, 0x9300a7, 0x9300a7, 0x9400a7, 0x693992,
            }),
        },
        .{
            .label = "Upscale test_square_image (non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 23,
            .new_height = 23,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x0101b6, 0x0005bb, 0x0009be, 0x000aba, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000aba, 0x0009be, 0x0005bb, 0x0101b6,
                0x006ce1, 0x473ba5, 0x8c0883, 0x8900b3, 0x7e00b0, 0x7800a8, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7800a8, 0x7e00b0, 0x8900b3, 0x8c0883, 0x473ba5, 0x006ce1,
                0x0099bc, 0x924f75, 0xff1750, 0xc92d92, 0xe232af, 0xf633b9, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf633b9, 0xe232af, 0xc92d92, 0xff1750, 0x924f75, 0x0099bc,
                0x201e07, 0xa20f31, 0xcb4052, 0x24d74f, 0xabf6c3, 0xfff6ff, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfff6ff, 0xabf6c3, 0x24d74f, 0xcb4052, 0xa20f31, 0x201e07,
                0x241200, 0xa4082a, 0xc74452, 0x14e948, 0xa6ffc5, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa6ffc5, 0x14e948, 0xc74452, 0xa4082a, 0x241200,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x221800, 0xa30c2e, 0xc94252, 0x1ce04c, 0xa8ffc3, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa8ffc3, 0x1ce04c, 0xc94252, 0xa30c2e, 0x221800,
                0x241200, 0xa4082a, 0xc74452, 0x14e948, 0xa6ffc5, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xa6ffc5, 0x14e948, 0xc74452, 0xa4082a, 0x241200,
                0x201e07, 0xa20f31, 0xcb4052, 0x24d74f, 0xabf6c3, 0xfff6ff, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfef5fb, 0xfff6ff, 0xabf6c3, 0x24d74f, 0xcb4052, 0xa20f31, 0x201e07,
                0x0099bc, 0x924f75, 0xff1750, 0xc92d92, 0xe232af, 0xf633b9, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf332b7, 0xf633b9, 0xe232af, 0xc92d92, 0xff1750, 0x924f75, 0x0099bc,
                0x006ce1, 0x473ba5, 0x8c0883, 0x8900b3, 0x7e00b0, 0x7800a8, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7900a9, 0x7800a8, 0x7e00b0, 0x8900b3, 0x8c0883, 0x473ba5, 0x006ce1,
                0x0101b6, 0x0005bb, 0x0009be, 0x000aba, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000ab9, 0x000aba, 0x0009be, 0x0005bb, 0x0101b6,
            }),
        },
        .{
            .label = "Downscale test_square_image (non-uniform and non-evenly divisible)",
            .source_image = test_square_image,
            .new_width = 9,
            .new_height = 6,
            .expected_pixels = &rgbPixelsfromHexArray(&.{
                0x4a6bb0, 0xcd00b2, 0xc100a4, 0xc100a5, 0xc100a5, 0xc100a5, 0xc100a4, 0xcd00b2, 0x4a6bb0,
                0x7a101f, 0x2af765, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x2af765, 0x7a101f,
                0x7a101f, 0x2af765, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x2af765, 0x7a101f,
                0x7a101f, 0x2af765, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x2af765, 0x7a101f,
                0x7a101f, 0x2af765, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x2af765, 0x7a101f,
                0x4a6bb0, 0xcd00b2, 0xc100a4, 0xc100a5, 0xc100a5, 0xc100a5, 0xc100a4, 0xcd00b2, 0x4a6bb0,
            }),
        },
    };

    for (test_cases) |test_case| {
        try test_resize_method(test_case, .bicubic, allocator);
    }
}
